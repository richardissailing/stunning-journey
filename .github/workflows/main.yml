name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # Remove the problematic DataDog action
      # - name: Start pipeline monitoring
      #   uses: DataDog/github-action-datadog@v1
      #   with:
      #     api-key: ${{ secrets.DD_API_KEY }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint
      
      - name: Report test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: junit.xml
          reporter: jest-junit

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy application
        run: |
          echo "Starting deployment of version ${{ github.sha }}"
      
      - name: Monitor deployment
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: |
          # Alternative approach for Datadog monitoring
          if [ -n "$DD_API_KEY" ]; then
            curl -X POST "https://api.datadoghq.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: $DD_API_KEY" \
            --data '{
              "title": "Deployment Complete",
              "text": "Version ${{ github.sha }} deployed successfully",
              "priority": "normal",
              "tags": ["env:prod", "version:${{ github.sha }}"]
            }'
          else
            echo "Datadog API key not found. Skipping event submission."
          fi